#!/usr/bin/env bash

# Enable xtrace if the DEBUG environment variable is set
if [[ ${DEBUG-} =~ ^1|yes|true$ ]]; then
    set -o xtrace       # Trace the execution of the script (debug)
fi

# A better class of script...
set -o errexit          # Exit on most errors (see the manual)
set -o errtrace         # Make sure any error trap is inherited
set -o nounset          # Disallow expansion of unset variables
set -o pipefail         # Use last non-zero exit code in a pipeline

# DESC: Usage help
# ARGS: None
# OUTS: None
function script_usage() {
    cat << EOF
Recreates local datalake

Dependencies: pipenv
Usage:
     -sdl|--skip-datalake       Skips re-building datalake
     -sdm|--skip-datamart       Skips re-building datamart
     -h|--help                  Displays this help
     -v|--verbose               Displays verbose output
     -nc|--no-colour            Disables colour output
EOF
}

# DESC: Parameter parser
# ARGS: $@ (optional): Arguments provided to the script
# OUTS: Variables indicating command-line parameters and options
function parse_params() {
    local param
    while [[ $# -gt 0 ]]; do
        param="$1"
        shift
        case $param in
            -sdl | --skip-datalake)
                skip_datalake=true
                ;;
            -sdm | --skip-datamart)
                skip_datamart=true
                ;;
            -h | --help)
                script_usage
                exit 0
                ;;
            -v | --verbose)
                verbose=true
                ;;
            -nc | --no-colour)
                no_colour=true
                ;;
            *)
                script_exit "Invalid parameter was provided: $param" 1
                ;;
        esac
    done
}


# DESC: Main control flow
# ARGS: $@ (optional): Arguments provided to the script
# OUTS: None
function main() {
    source "$(dirname "${BASH_SOURCE[0]}")/ralish_bash-script-template.sh"

    trap script_trap_err ERR
    trap script_trap_exit EXIT

    script_init "$@"
    parse_params "$@"
    cron_init
    colour_init

    check_binary pipenv "halt-if-not-exists"

    export PIPENV_VERBOSITY=-1
    if [[ -z ${skip_datalake-} ]]; then # If skip_datalake NOT set
          pretty_print "====> Recreating local datalake..." "$ta_bold"
          pipenv run alembic --name datalake downgrade base
          pipenv run alembic --name datalake -x include-seed-data=true upgrade head
          pretty_print "   => datalake recreated successfully" "$fg_green"
    fi

    if [[ -z "${skip_datamart-}" ]]; then # If skip_datamart NOT set
          pretty_print "====> Recreating local datamart..." "$ta_bold"
          pipenv run alembic --name datamart downgrade base
          pipenv run alembic --name datamart -x include-seed-data=true upgrade head
          pretty_print "   => datamart recreated successfully" "$fg_green"
    fi
}

# Make it rain
main "$@"
